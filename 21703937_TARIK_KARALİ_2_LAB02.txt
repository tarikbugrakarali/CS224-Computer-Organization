CS224
LAB 01
SECTION 2
TARIK BUĞRA KARALİ
21703937
--------------------------------------------------------
PART 3:

main:
#dynamic array
jal arr
#init
move $t1,$a2
li $t2, 0 # flag = 0
li $t7, 0 # counter = 0
li $s5, 2 # s5 = 2
div $s0, $t0, $s5 # s0 = size / 2
lw $t3,0($t1) #first element of array
sll $t4,$t0,2
subi $t4,$t4,4
add $t5 , $t1,$t4
lw $t6 , 0($t5) # last element of array
move $s7,$t0
addi $a3,$t1,0
la $s6,0($t1)
move $s4,$t1

###########################################
jal checkSymmetric
add $s0,$v0,$0
add $a0,$s0,$0	# print string before result
li $v0,1
syscall
li $v0,4       
la $a0,string  
syscall

#init 

move $t0, $s7 #size
move $t1, $a2 #array
li $s0,0
li $t2, 0 # total = 0
li $t3, 0 # counter = 0
li $t4, 0 # max = 0
lw $t6,0($t1) #first element of array
lw $t5,0($t1)
###########################################
jal FindMinMax
move $t8,$v0
li $v0,4       
la $a0,prompt1  
syscall 
add $s0,$v1,$0
add $a0,$s0,$0	# print string before result
li $v0,1
syscall
li $v0,4       
la $a0,string  
syscall 
li $v0,4       
la $a0,prompt2  
syscall 
add $s0,$t8,$0
add $a0,$s0,$0	# print string before result
li $v0,1
syscall
li $v0,4       
la $a0,string  
syscall 
#init
move $t0, $s7 #size
move $t1, $a2 #array
li $s0,0
li $t2, 0 # total = 0
li $t3, 0 # counter = 0
li $t4, 0 # max = 0
lw $t6,0($t1) #first element of array
lw $t5,0($t1)
###########################################
jal PrintArray
j finish
###########################################
arr:
    # read n from console
    la $a0,str1 # print string before
    li $v0,4
    syscall

    li $v0,5
    syscall
    move $t0,$v0 #size
   # move $t0,$s7

    # allocate dynamic memory
    sll $a0 $v0 2    # sll performs $a0 = $v0 x 2^2
    li $v0,9    #9 is the system code for service(sbrk) whoes work is        
    syscall     #to allocate dynamic memory

    move $t7,$zero
    addi $a2,$v0,0
    addi $t1,$v0,0
   # move $t1,$s6
    li $t3,0 #counter

    li $s5,2 #this holds 2

    div $s0, $t0, $s5 # s0 is limit


    move $t6 ,$t1 # t6 holds first value

    loop:
      bge $t7,$t0,done
    
      la $a0,str2 # print string before
      li $v0,4
      syscall

      # read in and store int
      li $v0 5
      syscall
      sw $v0 0($t1)

      addi $t7 ,$t7, 1
      addi $t1, $t1 ,4
      j loop

    done:
         jr $ra
   

checkSymmetric:
    bge $t7,$s0,end
    bne $t3,$t6,else
    addi $t1,$t1,4
    subi $t5,$t5,4
    addi $t7,$t7,1
    lw $t3,0($t1)
    lw $t6 , 0($t5)
    j checkSymmetric
   
    end:
      li $v0,1
      jr $ra

    else: 
     li $v0,0
     jr $ra

FindMinMax:

    bge  $t3,$t0,endd
    bgt $t6,$t4,max
    add $t1,$t1,4
    add $t3,$t3,1
    lw $t6,0($t1)
    j FindMinMax
  
  max:
    move $t4,$t6
    add $t1,$t1,4
    add $t3,$t3,1
    lw $t6,0($t1)
    j FindMinMax
  endd:
    move $v1,$t4
    #jr $ra
    move $t1, $a2
    li $t3, 1 
    lw $t6,0($t1)
    lw $t5,0($t1)
    j cont

  cont:     
    bgt $t3,$t0,ret
    blt  $t6,$t5,min
    add $t1,$t1,4
    add $t3,$t3,1
    lw $t6,0($t1)
  
   	
    j cont
  min:
    move $t5,$t6
    add $t1,$t1,4
    add $t3,$t3,1
    lw $t6,0($t1)
    j cont
  ret:
    move $v0,$t5
    jr $ra

PrintArray:
    bge  $t3,$t0,fin

    la $a0,str4	# print string before result
    li $v0,4
    syscall
    li $v0,1
    addi $a0,$t6,0
    syscall
    li      $v0,4       
    la      $a0,string  
    syscall 
    
    add $t1,$t1,4
    add $t3,$t3,1
    lw $t6,0($t1)
    j PrintArray
    
    fin:
       jr $ra
    
finish:



	.data
prompt1:	.asciiz "max :"
prompt2:	.asciiz "min:"
str1:.asciiz "Enter  array size: "
str2:.asciiz "Enter array element: "
string: .asciiz      "\n"
str4: .asciiz "      ARRAY :    "
array: .word 10, 2,5,3,3,12,2, 10,6
arrsize: .word 9


------------------------------------------------------------
PART 4

main:
   li $v0,4       
   la $a0,str5  
   syscall
    # read in and store int
    li $v0 5
    syscall
    addi $s1,$v0,0
    
    # read in and store int
    li $v0 5
    syscall
    addi $s2,$v0,0
    
    # read in and store int
    li $v0 5
    syscall
    addi $s3,$v0,0
  
   li $v0,4       
   la $a0,str1  
   syscall
   move $a0,$s1                 # put number into correct reg for syscall
   li      $v0,34                  # syscall number for "print hex"
   syscall 
   
   li $v0,4       
   la $a0,str2  
   syscall
   move $a0,$s2                   # put number into correct reg for syscall
   li      $v0,34                  # syscall number for "print hex"
   syscall 
   
   li $v0,4       
   la $a0,str3  
   syscall
   move $a0,$s3                   # put number into correct reg for syscall
   li      $v0,34                  # syscall number for "print hex"
   syscall 
   
   li $v0,4       
   la $a0,string 
   syscall
   
   li $v0,4       
   la $a0,str4 
   syscall
   
   move $a0,$s1                          
   move $a1,$s2  
   move $a2,$s3  
   li $s0,4
   div $s0,$a2,$s0
   li $s1,8
   move $s0,$s3
   div $s1,$s1,$s0 # s1 is loop counter
   li $t7,0 #result
   li $s5,0
   li $s6,32
   sub $s6,$s6,$a2
   li $s7,32
   sub $s7,$s7,$a2
   
   
   jal findpattern
   add $s0,$v0,$0
   add $a0,$s0,$0	# print string before result
   li $v0,1
   syscall
   j exit

findpattern:
     sllv $t1,$a0,$s6
     j loop
     
   loop:
     beq $s1,$0,finish
     sllv $t3,$a1,$s5
     srlv $t3,$t3,$s7
     srlv $t4,$t1,$s6
     add  $s5,$s5,$a2
     sub  $s6,$s6,$a2
     subi $s1,$s1,1
     srlv $t1,$t1,$a2
     beq $t4,$t3,addition
     j loop
     
  addition:
    addi $t7,$t7,1
    j loop
    
    
     

 finish:
    move $v0,$t7
    jr $ra
 
 exit:	
	.data

w1: .word  255
w2: .word  -1
w3: .word  4
string: .asciiz      "\n"
str1: .asciiz "      $a0 :    "
str2:.asciiz  "      $a1 :    "
str3:.asciiz  "      $a2 :    "
str4:.asciiz  "      find :    "
str5:.asciiz  "      Write $a0 , $a1 , $a2 respecrively:    "

