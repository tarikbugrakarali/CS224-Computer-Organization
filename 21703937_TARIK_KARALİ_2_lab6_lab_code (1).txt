CS224 
Lab 6
Section No: 2 
TARIK BUĞRA KARALİ 
ID :21703937
	.data
space:	.asciiz " "
endl:	.asciiz	"\n"
warn1:   .asciiz	"INVALID SIZE !\n"
option:	.asciiz	"Please choose the opeation below in MENU\n"
option1:	.asciiz	"1. Please write dimension of matrix ( N = \n"
option2:	.asciiz	"2. Display desired element in matrix\n"
option3:	.asciiz	"3. Get average of matrix elements by row-major summation\n"
option4:	.asciiz	"4. Get average of matrix elements by column-major summation\n"
option5:	.asciiz	"6. Exit\n"
option6:	.asciiz	"5. Create consecutive element matrix \n"
choose:	.asciiz	"Operation: "
chsN:	.asciiz "N: "
data:	.asciiz	"Data: "
row:	.asciiz	"i: "
col:	.asciiz	"j: "
sum:	.asciiz	"Sum is "

		.text
	.globl main
main:	
	

	la $a0, option		# Print prompt
	li $v0, 4
	syscall
	
	la $a0, option1		# Print prompt
	li $v0, 4
	syscall
	
	la $a0, option2		# Print prompt
	li $v0, 4
	syscall
	
	la $a0, option3		# Print prompt
	li $v0, 4
	syscall
	
	la $a0, option4		# Print prompt
	li $v0, 4
	syscall
	
	la $a0, option6		# Print prompt
	li $v0, 4
	syscall
	
	la $a0, option5		# Print prompt
	li $v0, 4
	syscall
	
	la $a0, choose		# Print prompt
	li $v0, 4
	syscall
	
	li $v0, 5		# Get option
	syscall
	move $t0, $v0
	
	addi $t1, $0, 1
	beq $t0, $t1, op1	# execute first option
	
	addi $t1, $t1, 1
	beq $t0, $t1, op2	# execute first option
	
	addi $t1, $t1, 1
	beq $t0, $t1, op3	# execute first option
	
	addi $t1, $t1, 1
	beq $t0, $t1, op4	# execute first option
	
	addi $t1, $t1, 1
	beq $t0, $t1, op5	# execute first option
	
	addi $t1, $t1, 1
	beq $t0, $t1, exit	# execute first option
	
	j main

warning :
        la $a0, warn1		# prints prompt
	li $v0, 4
	syscall
	j op1
op1:
	la $a0, chsN		# prints prompt
	li $v0, 4
	syscall

	li $v0, 5		# get dimension 
	syscall
	blez $v0, warning      # warning if the value invalid
	
	move $s0, $v0          # s0 = N
	mul $s1, $s0, $s0      # s1 = N*N
	
	move $a0, $s1
	li $v0, 9
	syscall
	move $s2, $v0		# move beginning adress of array to s2
	
	addi $t0, $0, 0		# counter
addLoop:
	bge $t0, $s1, main	# counter comparison with size
	
	la $a0, data		# prints prompt
	li $v0, 4
	syscall
	
	li $v0, 5		# gets element from user
	syscall
	
	sll $t1, $t0, 2		# gets adress of the current element
	add $t1, $t1, $s2
	sw $v0, 0($t1)		# stores element	
	addi $t0, $t0, 1	# moves indicator
	j addLoop
		
op2:
	la $a0, row		# prints prompt
	li $v0, 4
	syscall

	li $v0, 5		# get i
	syscall
	move $t1, $v0
	
	la $a0, col		# prints prompt
	li $v0, 4
	syscall

	li $v0, 5		# get j
	syscall
	move $t2, $v0
	
	addi $t1, $t1, -1     # i -1
	mul $t1, $t1, $s0     # N*(i - 1)
	sll $t1, $t1, 2       # N*(i - 1) *4 	
	addi $t2, $t2, -1    # j -1
	sll $t2, $t2, 2      # (j - 1) *4 
	add $t0, $t1, $t2    # N*(i - 1) *4 + (j - 1) *4 
	add $t0, $t0, $s2
	
	la $a0, data
	li $v0, 4
	syscall
	
	lw $a0, 0($t0)
	li $v0, 1
	syscall
	
	la $a0, endl
	li $v0, 4
	syscall
	
	j main

op3:
	addi $t0, $0, 0 #t0 = general sum
	addi $t1, $0, 1		# row counter
	addi $a1, $0, 0
	
rowInıt:
	bgt $t1, $s0, printAvrg 	# if indicator reaches length exit loop
	
	addi $t2, $0, 1 #column counter
	addi $t3, $0, 0 #column sum
	
	j rowSum

printRowSum:
        move $a0, $t3
	li $v0, 1
	syscall
	
	la $a0, endl
	li $v0, 4
	syscall
	
	addi $t1, $t1, 1	# increment row counter
	add $t0, $t0, $t3      # add rowSum to General Sum
	
	j rowInıt

rowSum:
	bgt $t2, $s0, printRowSum		# if indicator reaches length exit loop
	
	add $t4, $a1, $s2
	lw $t5, 0($t4)         #get element
	add $t3, $t3, $t5      #add rowSum
	addi $a1, $a1, 4	# increment adress
	addi $t2, $t2, 1	# increment column counter
	
	j rowSum

printAvrg:
		
	div $t7,$t0,$s1
	
	la $a0, sum
	li $v0, 4
	syscall
	
	move $a0, $t7
	li $v0, 1
	syscall
	j main
	
op4:
	addi $t0, $0, 0 #t0 = general sum
	addi $t1, $0, 1		# column counter
	addi $a1, $0, 0
	addi $a2, $0, -4
	
colInıt:
	bgt $t1, $s0, printAvrg 	# if indicator reaches length exit loop
	
	addi $t2, $0, 1 #row counter
	addi $t3, $0, 0 #column sum
	addi $a2, $a2, 4
	addi $a1, $a2, 0
	
	j colSum

printColSum:
        move $a0, $t3
	li $v0, 1
	syscall
	
	la $a0, endl
	li $v0, 4
	syscall
	
	addi $t1, $t1, 1	# increment row counter
	add $t0, $t0, $t3      # add rowSum to General Sum
	
	j colInıt

colSum:
	bgt $t2, $s0, printColSum		# if indicator reaches length exit loop
	
	add $t4, $a1, $s2
	lw $t5, 0($t4)         #get element
	add $t3, $t3, $t5      #add rowSum
	
	add $t2, $t2, 1
	sll $s3,$s0,2	# increment column counter
	add $a1, $a1, $s3	# increment adress
	
	j colSum
	
op5:
	la $a0, chsN		# prints prompt
	li $v0, 4
	syscall

	li $v0, 5		# get dimension 
	syscall
	blez $v0, warning      # warning if the value invalid
	
	move $s0, $v0          # s0 = N
	mul $s1, $s0, $s0      # s1 = N*N
	
	move $a0, $s1
	li $v0, 9
	syscall
	move $s2, $v0		# move beginning adress of array to s2
	
	addi $t5, $0, 1	
	addi $t0, $0, 0		# counter
addConsLoop:
	bge $t0, $s1, main	# counter comparison with size
	

	
	sll $t1, $t0, 2		# gets adress of the current element
	add $t1, $t1, $s2
	sw $t5, 0($t1)		# stores element	
	addi $t0, $t0, 1	# moves indicator
	addi $t5, $t5, 1	
	j addConsLoop
exit:
	li $v0, 10
	syscall
	
	
