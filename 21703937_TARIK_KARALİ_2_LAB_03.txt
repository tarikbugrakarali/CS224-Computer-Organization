.text
	li $v0, 4
	la $a0, prompt1
	syscall
	li $v0, 5
	syscall

	move	$a0, $v0
	move	$v1, $v0
	jal	createLinkedList
	
	# Linked list is pointed by $v0
	move	$a0, $v0	# pass the linked list address in $a0
	jal 	printLinkedList
	move	$a0, $v0
	#--------------- part 3 -------------------------------#
	jal rEVERSE
	move	$a0, $v0
	#--------------- part 4 -------------------------------#
	#jal duplicateListIterative
	#move	$a0, $v0
	#jal 	printLinkedList
	#--------------- part 5-------------------------------#
	

	#jal duplicateListRecursive
	#move	$a0, $v0
	#jal 	printLinkedList
	
	# Stop. 
	li	$v0, 10
	syscall

createLinkedList:
# $a0: No. of nodes to be created ($a0 >= 1)
# $v0: returns list head
# Node 1 contains 4 in the data field, node i contains the value 4*i in the data field.
# By 4*i inserting a data value like this
# when we print linked list we can differentiate the node content from the node sequence no (1, 2, ...).
	addi	$sp, $sp, -24
	sw	$s0, 20($sp)
	sw	$s1, 16($sp)
	sw	$s2, 12($sp)
	sw	$s3, 8($sp)
	sw	$s4, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram
	
	move	$s0, $a0	# $s0: no. of nodes to be created.
	li	$s1, 1		# $s1: Node counter
	# Create the first node: header.
	# Each node is 8 bytes: link filed then data field.
	li	$a0, 8
	li	$v0, 9
	syscall
	# OK now we have the list head. Save list head pointer 
	move	$s2, $v0	# $s2 points to the first and last node of the linked list.
	move	$s3, $v0	# $s3 now points to the list head.

	li 	$v0, 4
	la 	$a0, enterElement
	syscall
	
	# first node
	li 	$v0, 5
	syscall
	move 	$s4, $v0

	sw	$s4, 4($s2)	# Store the data value.
	
addNode:
	# Are we done?
	# No. of nodes created compared with the number of nodes to be created.
	beq	$s1, $s0, allDone
	addi	$s1, $s1, 1	# Increment node counter.
	li	$a0, 8 		# Remember: Node size is 8 bytes.
	li	$v0, 9
	syscall
	# Connect the this node to the lst node pointed by $s2.
	sw	$v0, 0($s2)
	
	# Now make $s2 pointing to the newly created node.
	move $s2, $v0

	li $v0, 4
	la $a0, enterElement
	syscall

	li $v0, 5
	syscall
	move $s4, $v0
		
	# sll: So that node 1 data value will be 4, node i data value will be 4*i
	sw	$s4, 4($s2)	# Store the data value.
	j	addNode
allDone:
	# Make sure that the link field of the last node cotains 0.
	# The last node is pointed by $s2.
	sw	$zero, 0($s2)
	move	$v0, $s3	# Now $v0 points to the list head ($s3).
	
	# Restore the register values
	lw	$ra, 0($sp)
	lw	$s4, 4($sp)
	lw	$s3, 8($sp)
	lw	$s2, 12($sp)
	lw	$s1, 16($sp)
	lw	$s0, 20($sp)
	addi	$sp, $sp, 24
	
	jr	$ra
	
#=========================================================
printLinkedList:
# Print linked list nodes in the following format
# --------------------------------------
# Node No: xxxx (dec)
# Address of Current Node: xxxx (hex)
# Address of Next Node: xxxx (hex)
# Data Value of Current Node: xxx (dec)
# --------------------------------------

	# Save $s registers used
	addi	$sp, $sp, -20
	sw	$s0, 16($sp)
	sw	$s1, 12($sp)
	sw	$s2, 8($sp)
	sw	$s3, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram

	# $a0: points to the linked list.
	# $s0: Address of current
	# s1: Address of next
	# $2: Data of current
	# $s3: Node counter: 1, 2, ...
	move $s0, $a0	# $s0: points to the current node.
	move $s4, $a0
	li   $s3, 0
printNextNode:
	beq	$s0, $zero, printedAll
				# $s0: Address of current node
	lw	$s1, 0($s0)	# $s1: Address of  next node
	lw	$s2, 4($s0)	# $s2: Data of current node
	addi	$s3, $s3, 1
	# $s0: address of current node: print in hex.
	# $s1: address of next node: print in hex.
	# $s2: data field value of current node: print in decimal.
	la	$a0, line
	li	$v0, 4
	syscall		# Print line seperator
	
	la	$a0, nodeNumberLabel
	li	$v0, 4
	syscall
	
	move	$a0, $s3	# $s0: Node number (position) of current node
	li	$v0, 1
	syscall
	
	la	$a0, addressOfCurrentNodeLabel
	li	$v0, 4
	syscall
	
	move	$a0, $s0	# $s0: Address of current node
	move	$a0, $s0
	li	$v0, 34
	syscall

	la	$a0, addressOfNextNodeLabel
	li	$v0, 4
	syscall
	move	$a0, $s1	# $s0: Address of next node
	li	$v0, 34
	syscall	
	
	la	$a0, dataValueOfCurrentNode
	li	$v0, 4
	syscall
		
	move	$a0, $s2	# $s2: Data of current node
	li	$v0, 1		
	syscall	

	# Now consider next node.
	move	$s0, $s1	# Consider next node.
	j	printNextNode
printedAll:
	# Restore the register values
	move $v0, $s4

	lw	$ra, 0($sp)
	lw	$s3, 4($sp)
	lw	$s2, 8($sp)
	lw	$s1, 12($sp)
	lw	$s0, 16($sp)
	addi	$sp, $sp, 20
	jr	$ra
	
#=========================================================	
duplicateListIterative: 
	
	# $v0: returns list head
	addi	$sp, $sp, -24
	sw	$s0, 20($sp)
	sw	$s1, 16($sp)
	sw	$s2, 12($sp)
	sw	$s3, 8($sp)
	sw	$s4, 4($sp)
	sw	$ra, 0($sp)

	move 	$s0, $a0 
        beq  	$s0, $0, Null # if (List == NULL)
        bne 	$s0, $0, dupHead # else
        
	jr $ra

dupHead:            
        li 	$a0, 8
	li 	$v0, 9	
	syscall
	
	move 	$s2, $v0 #new list head ptr (for operation)
	move 	$s3, $v0 #new list head ptr ( for save)
	lw 	$s1, 4($s0)    #load item in s1 
	sw 	$s1, 4($v0)	#store item in new list head
        lw 	$s0, 0($s0) 	#iteration
        j 	dupBody

dupBody:
       beq 	$s0, $0, finalList
       lw 	$s1, 4($s0) # load the item
       
       li 	$a0, 8
       li 	$v0, 9
       syscall  #mem allocation
       
       sw	$v0, 0($s2) 
       move	$s2, $v0  
       sw 	$s1, 4($s2) # store the item
       lw	$s0, 0($s0) # iterating for new operation

       j 	dupBody
       
finalList:
       move	$v0, $s3
       la	$a0, done
       li	$v0, 4
       syscall
       move	$v0, $s3 #return is new list head 
       jr 	$ra  

Null:
        move 	$v0, $0
        la	$a0, done
        li	$v0, 4
        syscall
        move	$v0, $s3 #return is new list head 
        jr 	$ra
#------------------------------------------------------------------      
duplicateListRecursive:
     
     	move 	$t4, $a0
    	beq 	$t4, $0, NullCase
    	bne 	$t4, $0, copyingHead
     
copyingHead: 
   
    	move 	$t5, $a0 # t5 = Node *head
    	lw 	$t9, 4($t5)#get the item (  t9 = head -> item)
    
    	li 	$a0, 8	# alocate 8 byte for new element, NEW NODE IS CREATED
    	li 	$v0, 9	# syscall for sbrk (dynamic memory allocation) 
    	syscall
    
    	move 	$t6, $v0 #$t6 = newNode
    	move 	$t7, $v0 #$t7 is head pointer of the duplicated list (save)
    	sw 	$0,0($v0)	# newNode->next = NULL
    	sw 	$t9,4($v0)	# newNode->item = head -> item
    	lw 	$t5, 0($t5) #head = head-> next
    
    	j 	recursi
    	
recursi:
    	move 	$a0, $t5 #t5 = head-> next
    	addi 	$sp, $sp, -8
    	sw 	$a0,4($sp)
    	sw 	$ra,0($sp)
    
    	beq 	$t5, $0, NullCase
    	lw 	$t9, 4($t5) #t9 = head-> next -> item
       
    	li 	$a0, 8
    	li 	$v0, 9
    	syscall #allocation for newNode -> next
       
    	sw 	$0, 0($v0)  # newNode->next -> next = NULL
    	sw 	$t9, 4($v0) # newNode-> next-> item = head -> next-> item 
    	sw 	$v0, 0($t6) # update the next pointer of the current pointer
       
    	lw 	$t5, 0($t5) # go for next
    	lw 	$t6, 0($t6) # update current pointer of the duplicated list
    	jal 	recursi # do the same for next elements
    	lw 	$ra, 0($sp)
    	lw 	$a0, 4($sp)
    	addi 	$sp, $sp, 8
    	add 	$v0, $t7, $zero #return is head
    
    	jr 	$ra
    
NullCase:
    	addi 	$sp, $sp, 8
    	add 	$v0, $t7, $zero #return is head
    	   	
    	jr 	$ra
        	
#=========================================================
rEVERSE:
	# $a0: pointer to the linked list
	# $v0: points to the linked list.
	# $s0: Address of current
	
	move $s0, $a0
	
	la $a0, ReverseSTR
	li $v0, 4
	syscall
	
	move $a0, $s0	
	move $s1,$v1 #s1 is size
	j rec
rec:
        addi $sp, $sp, 12 
	sw $a0, 0($sp)
	sw $s0, 4($sp)
	sw $ra, 8($sp) 
	     
       li $s3,1 #loop counter
       move $a0, $s0
       li $s2,1 # int i = s2
       bgt $s1,$s2,for
       move $a0, $s0
       lw $a0, 4($a0)
       li $v0, 1 
       syscall
	
       la $a0, space
       li $v0, 4
       syscall
       subi $sp, $sp, 12 
       jr 	$ra
for:	 
       bgt $s1,$s3,nextOp
       lw $a0, 4($a0)
        li $v0, 1 
	syscall
	
	la $a0, space
	li $v0, 4
	syscall
		
	move $a0, $s0
        subi $s1,$s1,1
        
        jal rec
        lw $a0, 0($sp)
	lw $s0, 4($sp)
	lw $ra, 8($sp) 
	subi $sp, $sp, 12 
        
        jr 	$ra


nextOp:
       lw $a0, 0($a0)
       addi $s3,$s3,1
       j for
	
		
			
				
					
						
							
									
	.data
line:	.asciiz "\n --------------------------------------"

nodeNumberLabel:
	.asciiz	"\n Node No.: "
	
addressOfCurrentNodeLabel:
	.asciiz	"\n Address of Current Node: "
	
addressOfNextNodeLabel:
	.asciiz	"\n Address of Next Node: "
	
dataValueOfCurrentNode:
	.asciiz	"\n Data Value of Current Node: "
	
prompt1:
	.asciiz	"\n Enter total number of elements in linked list: "
	
enterElement:
	.asciiz	" Enter element: "
	
space:
	.asciiz "  "
	
ReverseSTR:
	.asciiz "\n The linked list displayed in reverse is: "
	
done:
	.asciiz "\n Linked list has been duplicated iteratively."
	
